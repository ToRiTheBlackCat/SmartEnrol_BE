// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Repository.Models;

public partial class SmartEnrolDBContext : DbContext
{
    public SmartEnrolDBContext()
    {
    }

    public SmartEnrolDBContext(DbContextOptions<SmartEnrolDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AdmissionMethodOfMajor> AdmissionMethodOfMajors { get; set; }

    public virtual DbSet<AdmissionMethodOfUni> AdmissionMethodOfUnis { get; set; }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<Characteristic> Characteristics { get; set; }

    public virtual DbSet<CharacteristicOfMajor> CharacteristicOfMajors { get; set; }

    public virtual DbSet<CharacteristicOfStudent> CharacteristicOfStudents { get; set; }

    public virtual DbSet<Major> Majors { get; set; }

    public virtual DbSet<Recommendation> Recommendations { get; set; }

    public virtual DbSet<RecommendationDetail> RecommendationDetails { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<UniMajor> UniMajors { get; set; }

    public virtual DbSet<University> Universities { get; set; }

    public virtual DbSet<WishList> WishLists { get; set; }

    public virtual DbSet<WishListItem> WishListItems { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
        IConfigurationRoot configurationRoot = builder.Build();
        optionsBuilder.UseSqlServer(configurationRoot.GetConnectionString("FUMiniHotelManagement"));
        optionsBuilder.EnableSensitiveDataLogging(true);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.ToTable("Account");

            entity.Property(e => e.AccountName).HasMaxLength(255);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Area).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.AreaId)
                .HasConstraintName("FK_Account_Area");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Account_Role");
        });

        modelBuilder.Entity<AdmissionMethodOfMajor>(entity =>
        {
            entity.HasKey(e => e.AdmissionMethodsOfMajorId);

            entity.ToTable("AdmissionMethodOfMajor");

            entity.HasOne(d => d.AdmissionMethodOfUni).WithMany(p => p.AdmissionMethodOfMajors)
                .HasForeignKey(d => d.AdmissionMethodOfUniId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmissionMethodOfMajor_AdmissionMethodOfUni");

            entity.HasOne(d => d.UniMajor).WithMany(p => p.AdmissionMethodOfMajors)
                .HasForeignKey(d => d.UniMajorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmissionMethodOfMajor_UniMajor");
        });

        modelBuilder.Entity<AdmissionMethodOfUni>(entity =>
        {
            entity.ToTable("AdmissionMethodOfUni");

            entity.Property(e => e.MethodName).IsRequired();

            entity.HasOne(d => d.Uni).WithMany(p => p.AdmissionMethodOfUnis)
                .HasForeignKey(d => d.UniId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmissionMethodOfUni_University");
        });

        modelBuilder.Entity<Area>(entity =>
        {
            entity.ToTable("Area");

            entity.Property(e => e.AreaName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Characteristic>(entity =>
        {
            entity.ToTable("Characteristic");

            entity.Property(e => e.CharacteristicName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<CharacteristicOfMajor>(entity =>
        {
            entity.ToTable("CharacteristicOfMajor");

            entity.HasOne(d => d.Characteristic).WithMany(p => p.CharacteristicOfMajors)
                .HasForeignKey(d => d.CharacteristicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CharacteristicOfMajor_Characteristic");

            entity.HasOne(d => d.Major).WithMany(p => p.CharacteristicOfMajors)
                .HasForeignKey(d => d.MajorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CharacteristicOfMajor_Major");
        });

        modelBuilder.Entity<CharacteristicOfStudent>(entity =>
        {
            entity.ToTable("CharacteristicOfStudent");

            entity.HasOne(d => d.Account).WithMany(p => p.CharacteristicOfStudents)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CharacteristicOfStudent_Account");

            entity.HasOne(d => d.Characteristic).WithMany(p => p.CharacteristicOfStudents)
                .HasForeignKey(d => d.CharacteristicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CharacteristicOfStudent_Characteristic");
        });

        modelBuilder.Entity<Major>(entity =>
        {
            entity.ToTable("Major");

            entity.Property(e => e.MajorName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Recommendation>(entity =>
        {
            entity.ToTable("Recommendation");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Recommendations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Recommendation_Account");
        });

        modelBuilder.Entity<RecommendationDetail>(entity =>
        {
            entity.ToTable("RecommendationDetail");

            entity.HasOne(d => d.RecommendationNavigation).WithMany(p => p.RecommendationDetails)
                .HasForeignKey(d => d.RecommendationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecommendationDetail_Recommendation");

            entity.HasOne(d => d.UniMajor).WithMany(p => p.RecommendationDetails)
                .HasForeignKey(d => d.UniMajorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecommendationDetail_UniMajor");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(25)
                .IsFixedLength();
        });

        modelBuilder.Entity<UniMajor>(entity =>
        {
            entity.ToTable("UniMajor");

            entity.HasOne(d => d.Major).WithMany(p => p.UniMajors)
                .HasForeignKey(d => d.MajorId)
                .HasConstraintName("FK_UniMajor_Major");

            entity.HasOne(d => d.Uni).WithMany(p => p.UniMajors)
                .HasForeignKey(d => d.UniId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UniMajor_University");
        });

        modelBuilder.Entity<University>(entity =>
        {
            entity.HasKey(e => e.UniId);

            entity.ToTable("University");

            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsFixedLength();
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.UniCode).HasMaxLength(50);
            entity.Property(e => e.UniName).IsRequired();
            entity.Property(e => e.Website)
                .HasMaxLength(255)
                .IsFixedLength();

            entity.HasOne(d => d.Area).WithMany(p => p.Universities)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_University_Area");
        });

        modelBuilder.Entity<WishList>(entity =>
        {
            entity.ToTable("WishList");

            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.WishLists)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WishList_Account");
        });

        modelBuilder.Entity<WishListItem>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("WishListItem");

            entity.HasOne(d => d.Uni).WithMany(p => p.WishListItems)
                .HasForeignKey(d => d.UniId)
                .HasConstraintName("FK_WishListItem_University");

            entity.HasOne(d => d.UniMajor).WithMany(p => p.WishListItems)
                .HasForeignKey(d => d.UniMajorId)
                .HasConstraintName("FK_WishListItem_UniMajor");

            entity.HasOne(d => d.WishList).WithMany(p => p.WishListItems)
                .HasForeignKey(d => d.WishListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WishListItem_WishList");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}